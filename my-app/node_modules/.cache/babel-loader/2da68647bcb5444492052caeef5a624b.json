{"ast":null,"code":"import logo from './logo.svg';\nimport './App.css';\n\nvar express = require(\"express\");\n\nvar app = express();\n\nvar bodyParser = require(\"body-parser\"); // !! important !! creates /x-www-form-urlencoded parser - Remember to select body and x-www-form-urlencoded in postman\n\n\napp.use(bodyParser.urlencoded({\n  extended: true\n})); // uri = link to mongoose cluster - if doesn't let connect make sure ip is allowed and you have correct username:password\n\nvar mongoose = require(\"mongoose\");\n\nvar uri = \"mongodb+srv://dbuser:demopass@cluster0.qt87c.mongodb.net/sample_mflix\"; // Connect to mongo.db with mongoose\n\nmongoose.connect(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}); // Define Schema\n\nconst Movie = mongoose.model(\"Movie\", {\n  title: String,\n  year: Number,\n  poster: String\n}, \"movies\"); // Get all movies\n\napp.get(\"/api/getall\", function (req, res) {\n  // Documentation: https://mongoosejs.com/docs/api.html#model_Model.find\n  Movie.find({}, null, {\n    limit: 10\n  }, function (err, results) {\n    console.log(results);\n    res.json(results, 200);\n  });\n}); // Get movie with specific ID\n\napp.get(\"/api/:id\", function (req, res) {\n  var id = req.params.id;\n  Movie.findById(id, function (err, results) {\n    if (err) {\n      console.log(err);\n      res.json(\"System Error.\", 500);\n    } else if (results == null) {\n      res.json(\"Could not find item with given ID\", 200);\n    } else {\n      console.log(results);\n      res.json(results, 200);\n    }\n  });\n}); // Add 1 Movie\n\napp.post(\"/api/add\", function (req, res) {\n  var nimi = req.body.title;\n  var vuosi = req.body.year;\n  const film = new Movie({\n    title: nimi,\n    year: vuosi\n  });\n  console.log(film);\n  film.save();\n  console.log(req.body);\n  res.send(\"Added Movie: \" + req.body.title + \" (\" + req.body.year + \")\");\n}); // Edit a movie with its ID\n\napp.put(\"/api/update/:id\", function (req, res) {\n  var id = req.params.id;\n  Movie.findByIdAndUpdate(id, {\n    title: \"New Name\"\n  }, function (err, results) {\n    if (err) {\n      res.json(\"System Error.\", 500);\n    } else {\n      res.json(\"Updated movie with id: \" + req.params.id + \" named: \" + results.title);\n    }\n  });\n}); // Delete movie with its ID\n\napp.delete(\"/api/delete/:id\", function (req, res) {\n  var id = req.params.id;\n  Movie.findByIdAndDelete(id, function (err, results) {\n    if (err) {\n      console.log(err);\n      res.json(\"System Error.\", 500);\n    } else if (results == null) {\n      res.json(\"Could not find file for deletion.\", 200);\n    } else {\n      console.log(results);\n      res.json(\"Deleted \" + id + \" \" + results.title, 200);\n    }\n  });\n});\napp.listen(8081, function () {\n  console.log(\"Listening to port 8081!\");\n});\nexport default App;","map":{"version":3,"names":["logo","express","require","app","bodyParser","use","urlencoded","extended","mongoose","uri","connect","useNewUrlParser","useUnifiedTopology","Movie","model","title","String","year","Number","poster","get","req","res","find","limit","err","results","console","log","json","id","params","findById","post","nimi","body","vuosi","film","save","send","put","findByIdAndUpdate","delete","findByIdAndDelete","listen","App"],"sources":["C:/Users/Jereh/clonerepo/R0314-MEAN/R0314-MEAN/Projekti 4/my-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nvar express = require(\"express\");\nvar app = express();\nvar bodyParser = require(\"body-parser\");\n// !! important !! creates /x-www-form-urlencoded parser - Remember to select body and x-www-form-urlencoded in postman\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// uri = link to mongoose cluster - if doesn't let connect make sure ip is allowed and you have correct username:password\nvar mongoose = require(\"mongoose\");\nvar uri =\n  \"mongodb+srv://dbuser:demopass@cluster0.qt87c.mongodb.net/sample_mflix\";\n\n// Connect to mongo.db with mongoose\nmongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\n// Define Schema\nconst Movie = mongoose.model(\n  \"Movie\",\n  {\n    title: String,\n    year: Number,\n    poster: String,\n  },\n  \"movies\"\n);\n\n// Get all movies\napp.get(\"/api/getall\", function (req, res) {\n  // Documentation: https://mongoosejs.com/docs/api.html#model_Model.find\n  Movie.find({}, null, { limit: 10 }, function (err, results) {\n    console.log(results);\n    res.json(results, 200);\n  });\n});\n\n// Get movie with specific ID\napp.get(\"/api/:id\", function (req, res) {\n\n  var id = req.params.id;\n  Movie.findById(id, function (err, results) {\n\n    if (err) {\n      console.log(err);\n      res.json(\"System Error.\", 500);\n    } else if (results == null) {\n      res.json(\"Could not find item with given ID\", 200);\n    } else {\n      console.log(results);\n      res.json(results, 200);\n\n    }\n  });\n});\n\n// Add 1 Movie\napp.post(\"/api/add\", function (req, res) {\n  var nimi = req.body.title;\n  var vuosi = req.body.year;\n\n  const film = new Movie({\n    title: nimi,\n    year: vuosi,\n  })\n  console.log(film);\n  film.save();\n\n  console.log(req.body);\n  res.send(\"Added Movie: \" + req.body.title + \" (\" + req.body.year + \")\");\n});\n\n// Edit a movie with its ID\napp.put(\"/api/update/:id\", function (req, res) {\n\n  var id = req.params.id;\n\n  Movie.findByIdAndUpdate(id, { title: \"New Name\" }, function (err, results) {\n\n    if (err) {\n      res.json(\"System Error.\", 500);\n    }\n    else {\n      res.json(\"Updated movie with id: \" + req.params.id + \" named: \" + results.title);\n    }\n  });\n});\n\n// Delete movie with its ID\napp.delete(\"/api/delete/:id\", function (req, res) {\n\n  var id = req.params.id;\n\n  Movie.findByIdAndDelete(id, function (err, results) {\n    if (err) {\n      console.log(err);\n      res.json(\"System Error.\", 500);\n    } else if (results == null) {\n      res.json(\"Could not find file for deletion.\", 200);\n    } else {\n      console.log(results);\n      res.json(\"Deleted \" + id + \" \" + results.title, 200);\n    }\n  });\n});\n\napp.listen(8081, function () {\n  console.log(\"Listening to port 8081!\");\n});\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,GAAG,GAAGF,OAAO,EAAjB;;AACA,IAAIG,UAAU,GAAGF,OAAO,CAAC,aAAD,CAAxB,C,CACA;;;AACAC,GAAG,CAACE,GAAJ,CAAQD,UAAU,CAACE,UAAX,CAAsB;EAAEC,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AACA,IAAIC,QAAQ,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIO,GAAG,GACL,uEADF,C,CAGA;;AACAD,QAAQ,CAACE,OAAT,CAAiBD,GAAjB,EAAsB;EAAEE,eAAe,EAAE,IAAnB;EAAyBC,kBAAkB,EAAE;AAA7C,CAAtB,E,CAEA;;AACA,MAAMC,KAAK,GAAGL,QAAQ,CAACM,KAAT,CACZ,OADY,EAEZ;EACEC,KAAK,EAAEC,MADT;EAEEC,IAAI,EAAEC,MAFR;EAGEC,MAAM,EAAEH;AAHV,CAFY,EAOZ,QAPY,CAAd,C,CAUA;;AACAb,GAAG,CAACiB,GAAJ,CAAQ,aAAR,EAAuB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;EACzC;EACAT,KAAK,CAACU,IAAN,CAAW,EAAX,EAAe,IAAf,EAAqB;IAAEC,KAAK,EAAE;EAAT,CAArB,EAAoC,UAAUC,GAAV,EAAeC,OAAf,EAAwB;IAC1DC,OAAO,CAACC,GAAR,CAAYF,OAAZ;IACAJ,GAAG,CAACO,IAAJ,CAASH,OAAT,EAAkB,GAAlB;EACD,CAHD;AAID,CAND,E,CAQA;;AACAvB,GAAG,CAACiB,GAAJ,CAAQ,UAAR,EAAoB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;EAEtC,IAAIQ,EAAE,GAAGT,GAAG,CAACU,MAAJ,CAAWD,EAApB;EACAjB,KAAK,CAACmB,QAAN,CAAeF,EAAf,EAAmB,UAAUL,GAAV,EAAeC,OAAf,EAAwB;IAEzC,IAAID,GAAJ,EAAS;MACPE,OAAO,CAACC,GAAR,CAAYH,GAAZ;MACAH,GAAG,CAACO,IAAJ,CAAS,eAAT,EAA0B,GAA1B;IACD,CAHD,MAGO,IAAIH,OAAO,IAAI,IAAf,EAAqB;MAC1BJ,GAAG,CAACO,IAAJ,CAAS,mCAAT,EAA8C,GAA9C;IACD,CAFM,MAEA;MACLF,OAAO,CAACC,GAAR,CAAYF,OAAZ;MACAJ,GAAG,CAACO,IAAJ,CAASH,OAAT,EAAkB,GAAlB;IAED;EACF,CAZD;AAaD,CAhBD,E,CAkBA;;AACAvB,GAAG,CAAC8B,IAAJ,CAAS,UAAT,EAAqB,UAAUZ,GAAV,EAAeC,GAAf,EAAoB;EACvC,IAAIY,IAAI,GAAGb,GAAG,CAACc,IAAJ,CAASpB,KAApB;EACA,IAAIqB,KAAK,GAAGf,GAAG,CAACc,IAAJ,CAASlB,IAArB;EAEA,MAAMoB,IAAI,GAAG,IAAIxB,KAAJ,CAAU;IACrBE,KAAK,EAAEmB,IADc;IAErBjB,IAAI,EAAEmB;EAFe,CAAV,CAAb;EAIAT,OAAO,CAACC,GAAR,CAAYS,IAAZ;EACAA,IAAI,CAACC,IAAL;EAEAX,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACc,IAAhB;EACAb,GAAG,CAACiB,IAAJ,CAAS,kBAAkBlB,GAAG,CAACc,IAAJ,CAASpB,KAA3B,GAAmC,IAAnC,GAA0CM,GAAG,CAACc,IAAJ,CAASlB,IAAnD,GAA0D,GAAnE;AACD,CAbD,E,CAeA;;AACAd,GAAG,CAACqC,GAAJ,CAAQ,iBAAR,EAA2B,UAAUnB,GAAV,EAAeC,GAAf,EAAoB;EAE7C,IAAIQ,EAAE,GAAGT,GAAG,CAACU,MAAJ,CAAWD,EAApB;EAEAjB,KAAK,CAAC4B,iBAAN,CAAwBX,EAAxB,EAA4B;IAAEf,KAAK,EAAE;EAAT,CAA5B,EAAmD,UAAUU,GAAV,EAAeC,OAAf,EAAwB;IAEzE,IAAID,GAAJ,EAAS;MACPH,GAAG,CAACO,IAAJ,CAAS,eAAT,EAA0B,GAA1B;IACD,CAFD,MAGK;MACHP,GAAG,CAACO,IAAJ,CAAS,4BAA4BR,GAAG,CAACU,MAAJ,CAAWD,EAAvC,GAA4C,UAA5C,GAAyDJ,OAAO,CAACX,KAA1E;IACD;EACF,CARD;AASD,CAbD,E,CAeA;;AACAZ,GAAG,CAACuC,MAAJ,CAAW,iBAAX,EAA8B,UAAUrB,GAAV,EAAeC,GAAf,EAAoB;EAEhD,IAAIQ,EAAE,GAAGT,GAAG,CAACU,MAAJ,CAAWD,EAApB;EAEAjB,KAAK,CAAC8B,iBAAN,CAAwBb,EAAxB,EAA4B,UAAUL,GAAV,EAAeC,OAAf,EAAwB;IAClD,IAAID,GAAJ,EAAS;MACPE,OAAO,CAACC,GAAR,CAAYH,GAAZ;MACAH,GAAG,CAACO,IAAJ,CAAS,eAAT,EAA0B,GAA1B;IACD,CAHD,MAGO,IAAIH,OAAO,IAAI,IAAf,EAAqB;MAC1BJ,GAAG,CAACO,IAAJ,CAAS,mCAAT,EAA8C,GAA9C;IACD,CAFM,MAEA;MACLF,OAAO,CAACC,GAAR,CAAYF,OAAZ;MACAJ,GAAG,CAACO,IAAJ,CAAS,aAAaC,EAAb,GAAkB,GAAlB,GAAwBJ,OAAO,CAACX,KAAzC,EAAgD,GAAhD;IACD;EACF,CAVD;AAWD,CAfD;AAiBAZ,GAAG,CAACyC,MAAJ,CAAW,IAAX,EAAiB,YAAY;EAC3BjB,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,CAFD;AAIA,eAAeiB,GAAf"},"metadata":{},"sourceType":"module"}